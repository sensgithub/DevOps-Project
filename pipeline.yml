name: DevSecOps Pipeline for PHP w/ Composer

on:
  push:
    branches: ["main" ]
  pull_request:
    branches: ["main"]

env:
  IMAGE_NAME: sens31/ehospital
  GITHUB_REPO: sensgithub/eHospital
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  
permissions:
  contents: read

jobs:
  security:
  
    permissions:
      contents: read 
      security-events: write 
      actions: read 
      
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Snyk CLI
        run: curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash - && sudo apt-get install -y nodejs && sudo npm install -g snyk
            
      - name: Authenticate with Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}
        
      - name: Set up Snyk CLI to check for security issues
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb
          
      - name: Snyk Code test
        run: snyk code test --sarif > snyk-code.sarif || true

        # Build the docker image for testing
      - name: Build a Docker image
        run: docker build -t sens31/ehospital .
        
        # Runs Snyk Container (Container and SCA) analysis and uploads result to Snyk.      
      - name: Snyk Container monitor
        run: snyk container monitor sens31/ehospital --file=Dockerfile

       # Push the Snyk Code results into GitHub Code Scanning tab 
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-code.sarif
          
  test:
    runs-on: ubuntu-latest
    needs: security
    steps:
      - uses: actions/checkout@v3

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress
        
        
  build:
  
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        env:
          DOCKER_BUILDKIT: 1
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}:latest
